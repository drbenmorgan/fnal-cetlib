# - cetlibConfig Template file

# - May not need this variable as versioning file
# holds details, but seems to be convention
set(@PROJECT_NAME@_VERSION "@PROJECT_VERSION@")

# - CMakePackageConfigHelpers Startup...
@PACKAGE_INIT@

# Don't *strictly* need include dir(s) as linking to cetlib::cetlib
# target will propagate all needed requirements. However, it's
# useful if we're using header-only parts and don't want to
# have a binary linkage.
# NB: Could also/Should be derived from INTERFACE_INCLUDE_DIRS
# as this will add paths from deps (e.g Boost). However,
# as that would involve a genexp its propagation needs thought.
set_and_check(@PROJECT_NAME@_INCLUDE_DIR "@PACKAGE_CMAKE_INSTALL_INCLUDEDIR@")
set(@PROJECT_NAME@_INCLUDE_DIRS "${@PROJECT_NAME@_INCLUDE_DIR}")

# - When needed, refind Boost targets here
# At present, FindBoost does not support imported targets which
# allow fully relocatable config files (needs CMake 3.5 or better)
# Nevertheless, still refind Boost here so that we can always work with
# imported targets or not.
# CMake does provide a find_dependency module, but that doesn't
# seem to work so well with imported targets created in FindXXX
# modules. Also, not that the package *does not* need to be refound
# if it's a *private* and *shared lib only* dependency (i.e. no
# headers appear in out package's public interface)

# - Refind Boost components needed, assert EXACT version as this
# is default behaviour of UPS setups.
find_package(Boost @Boost_MAJOR_VERSION@.@Boost_MINOR_VERSION@ EXACT REQUIRED
  regex filesystem system
  )

# - Refind SSL on non-Apple platforms
if(NOT APPLE)
  # Strip trailing letters as find_package does not like these?
  set(cetlib_REQUIRED_OPENSSL_VERSION @OPENSSL_VERSION@)
  string(REGEX REPLACE "[a-z]+$" "" cetlib_REQUIRED_OPENSSL_VERSION "${cetlib_REQUIRED_OPENSSL_VERSION}")
  find_package(OpenSSL ${cetlib_REQUIRED_OPENSSL_VERSION} EXACT REQUIRED)
endif()

# - Include our targets
include("${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@Targets.cmake")

