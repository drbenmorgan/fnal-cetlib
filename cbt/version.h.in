//! \file    @CXXAPI_PROJECT_NAME@/@CXXAPI_HEADER_OUTPUT_NAME@
//! \brief   Describe the @CXXAPI_PROJECT_NAME@ API version
//! \details Querying the version of @CXXAPI_PROJECT_NAME@ is needed at
//!          both compile and runtime by clients so that they may adjust
//!          their usage.
//
#ifndef @CXXAPI_PREPROCESSOR_PREFIX@_VERSION_H@CXXAPI_GUID@
#define @CXXAPI_PREPROCESSOR_PREFIX@_VERSION_H@CXXAPI_GUID@
// Standard Library
#include <string>

//----------------------------------------------------------------------
// - Compile Time API
//! Major version number of @CXXAPI_PROJECT_NAME@
#define @CXXAPI_PREPROCESSOR_PREFIX@_VERSION_MAJOR @CXXAPI_VERSION_MAJOR@

//! Minor version number of @CXXAPI_PROJECT_NAME@
#define @CXXAPI_PREPROCESSOR_PREFIX@_VERSION_MINOR @CXXAPI_VERSION_MINOR@

//! Patch version number of @CXXAPI_PROJECT_NAME@
#define @CXXAPI_PREPROCESSOR_PREFIX@_VERSION_PATCH @CXXAPI_VERSION_PATCH@

//! Encode version of @CXXAPI_PROJECT_NAME@ to ordered integer available at compile time
#define @CXXAPI_PREPROCESSOR_PREFIX@_ENCODE_VERSION(major, minor, patch) (			\
						    ((major) * 10000)	\
						    + ((minor) *   100) \
						    + ((patch) *     1))

//! Integer encoded version for @CXXAPI_PROJECT_NAME@ available at compile time
#define @CXXAPI_PREPROCESSOR_PREFIX@_VERSION @CXXAPI_PREPROCESSOR_PREFIX@_ENCODE_VERSION(				\
					     @CXXAPI_PREPROCESSOR_PREFIX@_VERSION_MAJOR,	\
					     @CXXAPI_PREPROCESSOR_PREFIX@_VERSION_MINOR,	\
					     @CXXAPI_PREPROCESSOR_PREFIX@_VERSION_PATCH)

//! String encoded full version number of @CXXAPI_PROJECT_NAME@, e.g. "1.2.3", available at compile time
#define @CXXAPI_PREPROCESSOR_PREFIX@_LIB_VERSION "@CXXAPI_VERSION_MAJOR@.@CXXAPI_VERSION_MINOR@.@CXXAPI_VERSION_PATCH@"

//! Check current version of @CXXAPI_PROJECT_NAME@ is >= (major, minor, patch) at compile time
#define @CXXAPI_PREPROCESSOR_PREFIX@_IS_AT_LEAST(major,minor,patch) (				\
					       @CXXAPI_PREPROCESSOR_PREFIX@_VERSION >=	\
					       @CXXAPI_PREPROCESSOR_PREFIX@_ENCODE_VERSION(major,minor,patch))

//----------------------------------------------------------------------
// Runtime API
namespace @CXXAPI_OPEN_NAMESPACE@ {
struct version;
@CXXAPI_CLOSE_NAMESPACE@ }

//! \brief Describe the @CXXAPI_PROJECT_NAME@ API version and features
struct @CXXAPI_NAMESPACE@::version {
  //! Return the major version number of @CXXAPI_PROJECT_NAME@, e.g., 1 for '1.2.3'
  static int get_major();

  //! Return the minor version number of @CXXAPI_PROJECT_NAME@, e.g., 2 for '1.2.3'
  static int get_minor();

  //! Return the patch version number of @CXXAPI_PROJECT_NAME@, e.g., 3 for '1.2.3'
  static int get_patch();

  //! Return the full version number of @CXXAPI_PROJECT_NAME@ as a string, e.g., '1.2.3'
  static std::string get_version();

  //! Return true if the current @CXXAPI_PROJECT_NAME@ version >= (major, minor, patch)
  static bool is_at_least(int major, int minor, int patch);

  //! Return true if the named feature is available in @CXXAPI_PROJECT_NAME@
  static bool has_feature(const std::string& feature);
};

#endif // @CXXAPI_PREPROCESSOR_PREFIX@_VERSION_H@CXXAPI_GUID@

