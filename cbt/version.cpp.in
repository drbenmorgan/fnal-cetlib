// version.cc - Implementation of @CXXAPI_PROJECT_NAME@ version struct
//

// Ourselves:
#include "@CXXAPI_HEADER_OUTPUT_NAME@"

// Standard Library:
#include <sstream>


int @CXXAPI_NAMESPACE@::version::get_major() {
  return static_cast<int>(@CXXAPI_PREPROCESSOR_PREFIX@_VERSION_MAJOR);
}

int @CXXAPI_NAMESPACE@::version::get_minor() {
  return static_cast<int>(@CXXAPI_PREPROCESSOR_PREFIX@_VERSION_MINOR);
}

int @CXXAPI_NAMESPACE@::version::get_patch() {
  return static_cast<int>(@CXXAPI_PREPROCESSOR_PREFIX@_VERSION_PATCH);
}

std::string @CXXAPI_NAMESPACE@::version::get_version() {
  static std::string version("");

  if (version.empty()) {
    std::ostringstream stream;
    stream << @CXXAPI_PREPROCESSOR_PREFIX@_VERSION_MAJOR << "."
           << @CXXAPI_PREPROCESSOR_PREFIX@_VERSION_MINOR << "."
           << @CXXAPI_PREPROCESSOR_PREFIX@_VERSION_PATCH;
    version = stream.str();
  }

  return version;
}

bool @CXXAPI_NAMESPACE@::version::is_at_least(int major, int minor, int patch) {
  if (@CXXAPI_PREPROCESSOR_PREFIX@_VERSION_MAJOR < major) return false;
  if (@CXXAPI_PREPROCESSOR_PREFIX@_VERSION_MAJOR > major) return true;
  if (@CXXAPI_PREPROCESSOR_PREFIX@_VERSION_MINOR < minor) return false;
  if (@CXXAPI_PREPROCESSOR_PREFIX@_VERSION_MINOR > minor) return true;
  if (@CXXAPI_PREPROCESSOR_PREFIX@_VERSION_PATCH < patch) return false;
  return true;
}

bool @CXXAPI_NAMESPACE@::version::has_feature(const std::string&) {
  /// - If you want to add features, then the following implementation
  ///   provides one example based on string features cached in a set.
  ///   These can be expanded from a CMake variable.
  /// static std::set<std::string> features;
  ///
  /// if (features.empty())
  /// {
  ///   // cache the feature list
  ///   features.insert("FASTAPI");
  ///   features.insert("THREADSAFE");
  /// }
  ///
  /// return features.find(name) != features.end();

  return false;
}

